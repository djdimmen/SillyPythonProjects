"""
Maze Runner 2D, by Al Sweigart al@inventwithpython.org

Move around a maze and try to excape. Maze files are generated by mazemakerrec.py

Tags: large, game, maze
"""

import sys, os, subprocess

# Maze File Constants
WALL = '#'
EMPTY = ' '
START = 'S'
EXIT = 'E'

PLAYER = '@'
BLOCK = chr(9617)

def displayMaze(maze):
    # Display the maze
    for y in range(HEIGHT):
        for x in range(WIDTH):
            if (x,y) == (playerx, playery):
                print(PLAYER, end='')
            elif (x,y) == (exitx, exity):
                print('X', end='')
            elif maze[(x, y)] == WALL:
                print(BLOCK, end='')
            else:
                print(maze[(x, y)], end='')
        print() # Print a newline after printing the row.

def getMazeFile():
    txt_files = [f for f in os.listdir() if f.endswith('.txt') and os.path.isfile(f)]

    if not txt_files:
        print("No .txt files found.")
        sys.exit(0)

    for idx, file in enumerate(txt_files, 1):
        print(f"{idx}. {file}")

    try:
        choice = int(input("Enter the number of the file you want to choose: "))
        if 1 <= choice <= len(txt_files):
            selected_file = txt_files[choice - 1]
            print(f"You selected: {selected_file}")
        else:
            print("Invalid selection.")
    except ValueError:
        print("Please enter a valid number.")
    return selected_file

print("""Maze Runner 2D, by Al Sweigart al@inventwithpython.com

(Maze files are generated by mazemakerrec.py)""")

# Get the maze file's filename from the user:
print('Select the number of the maze file you want to play:')
filename = getMazeFile()

# Load the maze from a file:
mazeFile = open(filename)
maze = {}
lines = mazeFile.readlines()
playerx = None
playery = None
exitx = None
exity = None
y = 0
for line in lines:
    WIDTH = len(line.rstrip())
    for x, character in enumerate(line.rstrip()):
        assert character in (WALL, EMPTY, START, EXIT), 'Invalid character at column {}, line {}'.format(x+1, y+1)
        if character in (WALL, EMPTY):
            maze[(x, y)] = character
        elif character == START:
            playerx, playery = x, y
            maze[(x, y)] = EMPTY
        elif character == EXIT:
            exitx, exity = x, y
            maze[(x, y)] = EMPTY
    y +=1
HEIGHT = y

assert playerx != None and playery != None, 'No start in maze file.'
assert exitx != None and exity != None, 'No exit in maze file.'

while True:
    subprocess.run('cls', shell=True) # os.system('cls') on Windows
    displayMaze(maze)

    while True:
        print('')
        print('Enter direction, or QUIT:')
        print('    W ')
        print('   ASD')
        move = input('> ').upper()

        if move == "QUIT":
            print('Thanks for playing!')
            sys.exit()

        if move not in ['W','A','S','D']:
            print('Invalid direction. Enter one of the following directions:')
            print('   W, A, S, D')
            continue

        #Check if the player can move in that direction:
        if move == 'W' and maze[(playerx, playery - 1)] == EMPTY:
            break
        elif move == 'S' and maze[(playerx, playery + 1)] == EMPTY:
            break
        elif move == 'A' and maze[(playerx - 1, playery)] == EMPTY:
            break
        elif move == 'D' and maze[(playerx + 1, playery)] == EMPTY:
            break

        print('You cannot move in that direction.')

    # Keep moving in this direction until you encounter a branch point.
    if move == 'W':
        while True:
            playery -= 1
            if (playerx, playery) == (exitx, exity):
                break
            if maze[(playerx, playery - 1)] == WALL:
                break # Break if we hit a wall
            if (maze[(playerx - 1, playery)] == EMPTY
                or maze[(playerx + 1, playery)] == EMPTY):
                break # Break if we've reached a branch point.
    elif move == 'S':
        while True:
            playery += 1
            if (playerx, playery) == (exitx, exity):
                break
            if maze[(playerx, playery + 1)] == WALL:
                break # Break if we hit a wall
            if (maze[(playerx - 1, playery)] == EMPTY
                or maze[(playerx + 1, playery)] == EMPTY):
                break # Break if we've reached a branch point.
    elif move == 'A':
        while True:
            playerx -= 1
            if (playerx, playery) == (exitx, exity):
                break
            if maze[(playerx - 1, playery)] == WALL:
                break # Break if we hit a wall
            if (maze[(playerx, playery - 1)] == EMPTY
                or maze[(playerx, playery + 1)] == EMPTY):
                break # Break if we've reached a branch point.
    elif move == 'D':
        while True:
            playerx += 1
            if (playerx, playery) == (exitx, exity):
                break
            if maze[(playerx + 1, playery)] == WALL:
                break # Break if we hit a wall
            if (maze[(playerx, playery - 1)] == EMPTY
                or maze[(playerx, playery + 1)] == EMPTY):
                break # Break if we've reached a branch point.

    if (playerx, playery) == (exitx, exity):
        subprocess.run('cls', shell=True)
        displayMaze(maze)
        print('\n\nYou have reached the exit! Good Job!\n')
        print('Thanks for playing!')
        sys.exit
        break # Force the game to exit